---
title: "main"
format: html
editor: source
Rendering:
   embed-resources: true
---

```{r, eval=FALSE, echo=FALSE, warning=FALSE}
library(tidyverse)
library(ggplot2)
library(sf)
library(readr)
library(ggspatial)
library(sphet)
library(spatialreg)
library(spdep)
```

## Cargamos datasets

```{r}
pisos = read_csv("datasets/listings.csv", show_col_types = FALSE)
municipios = read_sf("datasets/mapa_espana/recintos_municipales_inspire_peninbal_etrs89.shp")
```

## Juntamos datasets

```{r}
#Agrupamos por municipios

municipios <- municipios %>% filter(CODNUT3=="ES532")


pisos1 <- st_as_sf(pisos, coords = c("longitude","latitude"), crs = st_crs(municipios), agr = "constant")

pisos <- st_join(pisos1,municipios, join = st_within) %>% 
   left_join(pisos %>% dplyr::select(id, latitude, longitude), by="id")

rm(pisos1)
```

## Limpiamos dataset

```{r}
pisos <- pisos %>% 
  dplyr::mutate(license = if_else(is.na(license), 0, 1)) %>% 
  dplyr::mutate(review_scores_rating = case_when(
    review_scores_rating < 4 ~ "Menos de 4 estrellas",
    review_scores_rating >= 4 & review_scores_rating < 4.5 ~ "Entre 4 y 4.5 estrellas",
    review_scores_rating >= 4.5 & review_scores_rating < 4.75 ~ "Entre 4.5 y 4.75 estrellas",
    review_scores_rating >= 4.75 & review_scores_rating < 5 ~"Entre 4.75 y 5 estrellas",
    review_scores_rating == 5 ~ "5 estrellas"
  )) %>% 
  dplyr::select(id, room_type, accommodates, price, minimum_nights, 
                availability_365, number_of_reviews, review_scores_rating, 
                calculated_host_listings_count, license, longitude, latitude, NAMEUNIT)
  

municipios <- municipios %>% dplyr::select(NAMEUNIT)


pisos$price <- gsub("[\\$, ]", "", pisos$price) %>% as.numeric()  # Quitar el símbolo $


#Filtramos por un precio adecuado para evitar valores atípicos

pisos = pisos %>% dplyr::filter(price<5000, !is.na(NAMEUNIT), room_type %in% c("Entire home/apt", "Private room")) 
  # %>% dplyr::mutate(logprice = log(price), .after = price) 
```

```{r}
mediana_precios <- aggregate(price ~ NAMEUNIT, data = pisos, FUN = median)
municipios <- merge(municipios, mediana_precios, by.x = "NAMEUNIT", by.y = "NAMEUNIT", all.x = TRUE)

municipios <- municipios %>%  rename(mediana_precio = price)
rm(mediana_precios)
```

### Análisis

#### Room_type

Variable cualitativa

```{r}
# Calcular frecuencias absolutas
frecuencia_absoluta <- table(pisos$room_type)

# Calcular frecuencias relativas
frecuencia_relativa <- prop.table(frecuencia_absoluta) * 100

# Crear un data.frame que combine ambas frecuencias
tabla_room_type <- data.frame(
  room_type = names(frecuencia_absoluta),
  frecuencia_absoluta = as.vector(frecuencia_absoluta),
  frecuencia_relativa = round(as.vector(frecuencia_relativa), 2)
)

# Mostrar la tabla
print(tabla_room_type)

ggplot(tabla_room_type, aes(x = room_type, y = frecuencia_absoluta)) +
  geom_bar(stat = "identity", fill = "skyblue", color = "black") +
  labs(title = "Alquiler de casas vs habitaciones",x="", y = "Frecuencia") +
  theme_minimal()
```

#### Alojamientos


Variable cuantitativa discreta. 
```{r}
summary(pisos$accommodates)

# Histograma
pisos %>%
  ggplot(aes(x = accommodates)) +
  geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
  labs(title = "Histograma del número de alojamientos", x = "Número de alojamientos", y = "Frecuencia")
```

#### Precio

Variable cuantitativa continua
```{r}
# Calcular medidas de tendencia central y dispersión
analisis_precio <- pisos %>%
  summarise(
    media = mean(price),
    mediana = median(price),
    varianza = var(price),
    desviacion_estandar = sd(price),
    rango = max(price) - min(price),
    minimo = min(price),
    maximo = max(price),
    q1 = quantile(price, 0.25),  # Primer cuartil
    q3 = quantile(price, 0.75),  # Tercer cuartil
    IQR = q3 - q1,
    asimetria = mean((price - mean(price))^3) / sd(price)^3,
    curtosis = mean((price - mean(price))^4) / sd(price)^4 - 3 
  ) %>% st_drop_geometry()

# Mostrar el resumen
print(analisis_precio)


pisos %>% ggplot(aes(x=price))+
  geom_density(fill = "skyblue", color = "black", alpha = 0.6) + 
  labs(title = "Gráfico de densidad del precio", x = "Precio", y = "Densidad") +
  theme_minimal()
```


#### Estancia mínima

```{r}
resumen_noches = pisos %>% 
  summarise(
    media = mean(minimum_nights),
    mediana = median(minimum_nights),
    varianza = var(minimum_nights),
    desviacion_estandar = sd(minimum_nights),
    rango = max(minimum_nights) - min(minimum_nights),
    minimo = min(minimum_nights),
    maximo = max(minimum_nights),
    q1 = quantile(minimum_nights, 0.25),  # Primer cuartil
    q3 = quantile(minimum_nights, 0.75),  # Tercer cuartil
    IQR = q3 - q1) %>%  st_drop_geometry()

print(resumen_noches)

resultado <- pisos %>%
  group_by(
    categoria = case_when(
      minimum_nights == 1 ~ "1 día",
      minimum_nights == 2 ~ "2 días",
      minimum_nights == 3 ~ "3 días",
      minimum_nights == 4 ~ "4 días",
      minimum_nights == 5 ~ "5 días",
      minimum_nights == 6 ~ "6 días",
      minimum_nights == 7 ~ "7 días",
      minimum_nights > 7 ~ "Más de una semana",
      TRUE ~ "Otros"  # Para manejar valores no esperados
    )
  ) %>%
  summarise(
    conteo = n(),  # Contar el número de registros en cada categoría
    .groups = 'drop'  # Opcional, para evitar advertencias sobre agrupación
  ) %>% st_drop_geometry()


resultado %>% ggplot(aes(x = categoria, y = conteo)) +
  geom_bar(stat = "identity", fill = "skyblue", color = "black") +        # 'identity' para usar los valores en 'frecuencias'
  geom_text(aes(label = conteo), vjust = -0.3) +    # Añadir etiquetas sobre las barras
  labs(title = "Distribución del Número Mínimo de Noches \n",
       x = "Número de Noches",
       y = "Frecuencia") +
  theme_minimal() +                                      # Tema limpio y minimalista
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) 
```


### Gráficos

```{r}
ggplot(pisos, aes(x = log(price))) +
  geom_density(fill = "blue", alpha = 0.5) +
  labs(title = "Densidad del logaritmo del precio",
       x = "Logaritmo del precio",
       y = "Densidad") +
  theme_minimal()

```

```{r, eval = FALSE}
plot_mallorca <- ggplot()+
  geom_sf(data=municipios, colour = "gray50", aes(fill = log(mediana_precio)))+
  coord_sf(xlim = c(2.3,3.5), ylim = c(39.2,40)) +
  scale_fill_gradient(name="Precios alquiler", low="yellow", high="red") +
  xlab("Longitud")+
  ylab("Latitud")+
  ggspatial::annotation_scale(
    location = "tl",
    bar_cols = c("grey60", "white")
  ) +
  ggspatial::annotation_north_arrow(
    location = "bl", which_north = "true",
    pad_x = unit(0, "in"), pad_y = unit(0, "in"),
    style = ggspatial::north_arrow_nautical(
      fill = c("grey40", "white"),
      line_col = "grey20"
    )
  )

plot_mallorca 
```

### Modelo bebé

```{r}
set.seed(777)
muestra = sample_n(pisos,15797)
```

```{r}
a=fastDummies::dummy_cols(muestra$room_type)

muestra$Entire=a[,2]


OLS=lm(log(price)~minimum_nights+number_of_reviews+
         calculated_host_listings_count+license+availability_365+Entire,
       data=muestra)

n <- dim(muestra)[1]

puntos=cbind(muestra$longitude,muestra$latitude)

dis <- dist(puntos,upper=TRUE)
D=as.matrix(dis)

#### Acá hay un problema por valores cercanos

W <- 1 / D^2

#### Vamos por 

W <- ifelse(D<0.05, 1, 0)
W[!is.finite(W)] <- NA
W[is.na(W)] <- 0
rtot <- rowSums(W, na.rm=TRUE)
W <- W / rtot # Matriz estandarizada
#W <- Matrix(round(W, 3), sparse = TRUE)

W <- Matrix(W, sparse = TRUE)



rm(dis)
rm(D)
gc()
gc()
#Wdist.mat.tot=W
#Wdist.list.tot=mat2listw(W)

```


## Validación cruzada

```{r, eval=FALSE, echo=FALSE, warning=FALSE}
library(tidyverse)
library(ggplot2)
library(sf)
library(readr)
library(ggspatial)
library(sphet)
library(spatialreg)
library(spdep)


pisos = read_csv("datasets/listings.csv", show_col_types = FALSE)
municipios = read_sf("datasets/mapa_espana/recintos_municipales_inspire_peninbal_etrs89.shp")


municipios <- municipios %>% filter(CODNUT3=="ES532")


pisos1 <- st_as_sf(pisos, coords = c("longitude","latitude"), crs = st_crs(municipios), agr = "constant")

pisos <- st_join(pisos1,municipios, join = st_within) %>% 
   left_join(pisos %>% dplyr::select(id, latitude, longitude), by="id")

rm(pisos1)

pisos <- pisos %>% 
  dplyr::mutate(license = if_else(is.na(license), 0, 1)) %>% 
  dplyr::mutate(review_scores_rating = case_when(
    review_scores_rating < 4 ~ "Menos de 4 estrellas",
    review_scores_rating >= 4 & review_scores_rating < 4.5 ~ "Entre 4 y 4.5 estrellas",
    review_scores_rating >= 4.5 & review_scores_rating < 4.75 ~ "Entre 4.5 y 4.75 estrellas",
    review_scores_rating >= 4.75 & review_scores_rating < 5 ~"Entre 4.75 y 5 estrellas",
    review_scores_rating == 5 ~ "5 estrellas"
  )) %>% 
  dplyr::select(id, room_type, accommodates, price, minimum_nights, 
                availability_365, number_of_reviews, review_scores_rating, 
                calculated_host_listings_count, license, longitude, latitude, NAMEUNIT)
  

municipios <- municipios %>% dplyr::select(NAMEUNIT)


pisos$price <- gsub("[\\$, ]", "", pisos$price) %>% as.numeric()  # Quitar el símbolo $


#Filtramos por un precio adecuado para evitar valores atípicos

pisos = pisos %>% dplyr::filter(price<5000, !is.na(NAMEUNIT), room_type %in% c("Entire home/apt", "Private room")) 

n_filas = 50
n_columnas = 50

matriz_AIC = matrix(nrow = n_filas,ncol = n_columnas)

for(repeticion in 1:n_filas){
  
  prueba = sample_n(pisos,500)
  a=fastDummies::dummy_cols(prueba$room_type)
  
  prueba$Entire=a[,2]
  
  n <- dim(prueba)[1]
  puntos=cbind(prueba$longitude,prueba$latitude)
  
  dis <- dist(puntos,upper=TRUE)
  minimo = Inf
  
  for(i in 1:n_columnas){
    
    k = i/100
    
    D=as.matrix(dis)
    D=ifelse(D<=k,1,0)
    W <- 1 / D^2
    W[!is.finite(W)] <- NA
    W[is.na(W)] <- 0
    rtot <- rowSums(W, na.rm=TRUE)
    W <- W / rtot # Matriz estandarizada
  
    print(c(repeticion,k))
    
    rm(D)
    gc()
    Wdist.mat.tot=W
    Wdist.list.tot=mat2listw(W)
    
    SARAR_prueba = sacsarlm(log(price)~minimum_nights+number_of_reviews+
                 license+availability_365+Entire,
               data=prueba,listw = Wdist.list.tot,zero.policy = TRUE)
    
    matriz_AIC[repeticion,i] = AIC(SARAR_prueba)
    
  }
  print("He llegado!!!")
}

minimos_filas <- apply(matriz_AIC, 1, min)
print(minimos_filas)
print(min(minimos_filas))

#Matriz con 10 repeticiones, con muestras de 200 pisos
#write.csv(matriz_AIC, "matriz_AIC.csv", row.names = FALSE, col.names = FALSE)

#Matriz con 50 repeticiones, con muestras de 500 pisos
write.csv(matriz_AIC, "matriz_AIC2.csv", row.names = FALSE, col.names = FALSE)
matriz_AIC2 = read_csv("matriz_AIC2.csv")

for(i in 1:50){
  plot(1:n_columnas/100, matriz_AIC2[i,],type = "o", col = "red", pch = 16, xlab = "X", ylab = "Y", main = "Gráfico con puntos y líneas")
}
```






### SARAR

```{r}
SARAR <- spreg(log(price)~minimum_nights+number_of_reviews+
                 calculated_host_listings_count+license+availability_365+Entire,
               data=muestra,listw = W, model="sarar", het=TRUE)

#### El sarar solo llevaba la matriz W con la distancia a la menos 1
#### El sara W1 lleva la matriz con W que vale 1 si estas a menos de 0.05 de distancia
save(SARAR, file="SARARW1.RData")
summary(SARAR)
```

```{r}
SARAR_2=sacsarlm(log(price)~minimum_nights+number_of_reviews+
               license+availability_365+Entire,
             data=muestra,listw = Wdist.list.tot,zero.policy = TRUE)

summary(SARAR_2)
```

### SAR

```{r}
SAR=lagsarlm(log(price)~minimum_nights+number_of_reviews+
               license+availability_365+Entire,
             data=muestra,listw = Wdist.list.tot,zero.policy = TRUE)

summary(SAR)
```



### SEM

```{r}
SD = diag(diag(SARAR$var[8:9, 8:9])^(-1/2))
SD%*%SARAR$var[8:9, 8:9]%*%SD
```

```{r}
SEM=errorsarlm(log(price)~minimum_nights+number_of_reviews+
               license+availability_365+Entire,
             data=muestra,listw = Wdist.list.tot,zero.policy = TRUE)

summary(SEM)
```

### Modelo SARAR

```{r}

DatosF <- Datos %>% dplyr::filter(!is.na(price)) %>% 
  dplyr::filter(price<5000, price>10, 
                room_type%in%c("Entire home/apt", "Private room") ) %>% 
  dplyr::select(price, latitude, longitude, room_type,
                minimum_nights, number_of_reviews, calculated_host_listings_count,
                license, availability_365) %>% 
  dplyr::mutate(license = ifelse(is.na(license),0,1),
                priceRank = cut(price, 
                                breaks = round(quantile(price, probs=c(0,0.2,0.4,0.6,0.8,1))),
                                include.lowest = TRUE) ) %>% 
  na.exclude() %>% 
  sample_n(1000)



table(DatosF$room_type)

a=fastDummies::dummy_cols(DatosF$room_type)

DatosF$Entire=a[,2]


OLS=lm(log(price)~minimum_nights+number_of_reviews+
         calculated_host_listings_count+license+availability_365+Entire,
       data=DatosF)

n <- dim(DatosF)[1]

puntos=cbind(DatosF$longitude,DatosF$latitude)

dis <- dist(puntos,upper=TRUE)
D=as.matrix(dis)

W <- 1 / D^2


W[!is.finite(W)] <- NA
W[is.na(W)] <- 0
rtot <- rowSums(W, na.rm=TRUE)
Wdist.mat.tot=W
Wdist.list.tot=mat2listw(W)

W <- W / rtot # Matriz estandarizada
rm(dis)
```

```{r}
SAR=lagsarlm(log(price)~minimum_nights+number_of_reviews+
               calculated_host_listings_count+license+availability_365+Entire,
             data=DatosF,listw = Wdist.list.tot,zero.policy = TRUE)

summary(SAR)


SARAR <- spreg(log(price)~minimum_nights+number_of_reviews+
                 calculated_host_listings_count+license+availability_365+Entire,
               data=DatosF,listw = Wdist.list.tot, model="sarar", het=TRUE)

summary(SARAR)

```
