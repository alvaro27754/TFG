---
title: "main"
format: html
editor: source
Rendering:
   embed-resources: true
---

# Inicio

```{r, echo=FALSE, warning=FALSE, message=FALSE}
library(tidyverse)
library(ggplot2)
library(sf)
library(readr)
library(ggspatial)
library(sphet)
library(spatialreg)
library(spdep)
library(GGally)
library(knitr)
library(kableExtra)
```


```{r}
pisos = read_csv("datasets/listings.csv", show_col_types = FALSE)
municipios = read_sf("datasets/mapa_espana/recintos_municipales_inspire_peninbal_etrs89.shp")



municipios <- municipios %>% filter(CODNUT3=="ES532")


pisos1 <- st_as_sf(pisos, coords = c("longitude","latitude"), crs = st_crs(municipios), agr = "constant")

pisos <- st_join(pisos1,municipios, join = st_within) %>% 
   left_join(pisos %>% dplyr::select(id, latitude, longitude), by="id")

rm(pisos1)

municipios <- municipios %>% dplyr::select(NAMEUNIT)



pisos$price <- gsub("[\\$, ]", "", pisos$price) %>% as.numeric()  # Quitar el símbolo $

pisos <- pisos %>% 
   dplyr::select(id, room_type, accommodates, price, minimum_nights, 
                availability_365, number_of_reviews, review_scores_rating, 
                license, longitude, latitude, NAMEUNIT) %>% 
   
   dplyr::filter(price<5000, !is.na(NAMEUNIT), 
                 room_type %in% c("Entire home/apt", "Private room")) %>% 
   
   dplyr::mutate(logprice = log(price), .after = price) %>% 
   
   dplyr::mutate(review_scores_rating = case_when(
   is.na(review_scores_rating) ~ "No tienen reviews",
   review_scores_rating < 4 ~ "Menos de 4 estrellas",
    review_scores_rating >= 4 & review_scores_rating < 4.5 ~ "Entre 4 y 4.5 estrellas",
    review_scores_rating >= 4.5 & review_scores_rating < 4.75 ~ "Entre 4.5 y 4.75 estrellas",
    review_scores_rating >= 4.75 & review_scores_rating < 5 ~"Entre 4.75 y 5 estrellas",
    review_scores_rating == 5 ~ "5 estrellas"
  )) %>% dplyr::mutate(license = if_else(is.na(license), 0, 1))
```




```{r}
set.seed(777)

a=fastDummies::dummy_cols(pisos$room_type)

pisos$Entire=a[,2]


OLS=lm(logprice~accommodates+minimum_nights+availability_365+
        number_of_reviews+license+Entire, data=pisos)

n <- dim(pisos)[1]

puntos=cbind(pisos$longitude,pisos$latitude)

dis <- dist(puntos,upper=TRUE)
D=as.matrix(dis)

#### Acá hay un problema por valores cercanos

#W <- 1 / D^2

#### Vamos por 

W <- ifelse(D<0.0117, 1, 0)
W[!is.finite(W)] <- NA
W[is.na(W)] <- 0
rtot <- rowSums(W, na.rm=TRUE)
W <- W / rtot # Matriz estandarizada
#W <- Matrix(round(W, 3), sparse = TRUE)

#W <- Matrix(W, sparse = TRUE)



rm(dis)
rm(D)
gc()
gc()
Wdist.mat.tot=W
Wdist.list.tot=mat2listw(W)
rm(W)
```







## SARAR

```{r}
SARAR <- spreg(logprice~accommodates+minimum_nights+availability_365+
                 number_of_reviews+license+Entire, data=pisos,
               listw = Wdist.list.tot, model="sarar", het=TRUE)

#### El sarar solo llevaba la matriz W con la distancia a la menos 1
#### El sara W1 lleva la matriz con W que vale 1 si estas a menos de 0.05 de distancia
#save(SARAR, file="SARARW1.RData")
summary(SARAR)
```

```{r}
impactos_SARAR = sphet::impacts(SARAR, listw = Wdist.list.tot)
impactos_SARAR
```

```{r}
W = Matrix(Wdist.mat.tot, sparse=TRUE)
IpWm1 = solve(diag(n)-SARAR$coefficients[8]*W)
gc()
gc()
```
```{r}
### Impactos
for(k in 2:(length(SARAR$coefficients)-2)){
   S_k = SARAR$coefficients[k]*IpWm1
   ID = mean(diag(S_k))
   IT = mean(colSums(S_k))
   II = IT-ID
   print(paste("Para la variable ", rownames(SARAR$coefficients)[k]))
   print(cbind(SARAR$coefficients[k],ID, II, IT))
}
```


## SAR

```{r}
SAR <- spreg(logprice~accommodates+minimum_nights+availability_365+
                 number_of_reviews+license+Entire, data=pisos,
               listw = Wdist.list.tot, model="lag", het=TRUE)

summary(SAR)
```
```{r}
impactos_SAR = sphet::impacts(SAR, listw = Wdist.list.tot)
impactos_SAR
```


```{r}
SEM <- spreg(logprice~accommodates+minimum_nights+availability_365+
                 number_of_reviews+license+Entire, data=pisos,
               listw = Wdist.list.tot, model="error", het=TRUE)
summary(SEM)
```













































# Cosas en el olvido

#### Modelo SARAR

```{r}

DatosF <- Datos %>% dplyr::filter(!is.na(price)) %>% 
  dplyr::filter(price<5000, price>10, 
                room_type%in%c("Entire home/apt", "Private room") ) %>% 
  dplyr::select(price, latitude, longitude, room_type,
                minimum_nights, number_of_reviews, calculated_host_listings_count,
                license, availability_365) %>% 
  dplyr::mutate(license = ifelse(is.na(license),0,1),
                priceRank = cut(price, 
                                breaks = round(quantile(price, probs=c(0,0.2,0.4,0.6,0.8,1))),
                                include.lowest = TRUE) ) %>% 
  na.exclude() %>% 
  sample_n(1000)



table(DatosF$room_type)

a=fastDummies::dummy_cols(DatosF$room_type)

DatosF$Entire=a[,2]


OLS=lm(log(price)~minimum_nights+number_of_reviews+
         calculated_host_listings_count+license+availability_365+Entire,
       data=DatosF)

n <- dim(DatosF)[1]

puntos=cbind(DatosF$longitude,DatosF$latitude)

dis <- dist(puntos,upper=TRUE)
D=as.matrix(dis)

W <- 1 / D^2


W[!is.finite(W)] <- NA
W[is.na(W)] <- 0
rtot <- rowSums(W, na.rm=TRUE)
Wdist.mat.tot=W
Wdist.list.tot=mat2listw(W)

W <- W / rtot # Matriz estandarizada
rm(dis)
```

```{r}
SAR=lagsarlm(log(price)~minimum_nights+number_of_reviews+
               calculated_host_listings_count+license+availability_365+Entire,
             data=DatosF,listw = Wdist.list.tot,zero.policy = TRUE)

summary(SAR)


SARAR <- spreg(log(price)~minimum_nights+number_of_reviews+
                 calculated_host_listings_count+license+availability_365+Entire,
               data=DatosF,listw = Wdist.list.tot, model="sarar", het=TRUE)

summary(SARAR)

```





```{r}
SARAR_2=sacsarlm(logprice~accommodates+minimum_nights+availability_365+
                 number_of_reviews+license+Entire, data=pisos,
                 listw = Wdist.list.tot,zero.policy = TRUE)

summary(SARAR_2)
```

### SAR

```{r}
SAR=lagsarlm(logprice~accommodates+minimum_nights+availability_365+
                 number_of_reviews+license+Entire, data=pisos,
                 listw = Wdist.list.tot,zero.policy = TRUE)

summary(SAR)
```



### SEM

```{r}
SD = diag(diag(SARAR$var[8:9, 8:9])^(-1/2))
SD%*%SARAR$var[8:9, 8:9]%*%SD
```

```{r}
SEM=errorsarlm(log(price)~minimum_nights+number_of_reviews+
               license+availability_365+Entire,
             data=muestra,listw = Wdist.list.tot,zero.policy = TRUE)

summary(SEM)
```





#### Validación cruzada

```{r, eval=FALSE, echo=FALSE, warning=FALSE}
library(tidyverse)
library(ggplot2)
library(sf)
library(readr)
library(ggspatial)
library(sphet)
library(spatialreg)
library(spdep)


pisos = read_csv("datasets/listings.csv", show_col_types = FALSE)
municipios = read_sf("datasets/mapa_espana/recintos_municipales_inspire_peninbal_etrs89.shp")


municipios <- municipios %>% filter(CODNUT3=="ES532")


pisos1 <- st_as_sf(pisos, coords = c("longitude","latitude"), crs = st_crs(municipios), agr = "constant")

pisos <- st_join(pisos1,municipios, join = st_within) %>% 
   left_join(pisos %>% dplyr::select(id, latitude, longitude), by="id")

rm(pisos1)

pisos <- pisos %>% 
  dplyr::mutate(license = if_else(is.na(license), 0, 1)) %>% 
  dplyr::mutate(review_scores_rating = case_when(
    review_scores_rating < 4 ~ "Menos de 4 estrellas",
    review_scores_rating >= 4 & review_scores_rating < 4.5 ~ "Entre 4 y 4.5 estrellas",
    review_scores_rating >= 4.5 & review_scores_rating < 4.75 ~ "Entre 4.5 y 4.75 estrellas",
    review_scores_rating >= 4.75 & review_scores_rating < 5 ~"Entre 4.75 y 5 estrellas",
    review_scores_rating == 5 ~ "5 estrellas"
  )) %>% 
  dplyr::select(id, room_type, accommodates, price, minimum_nights, 
                availability_365, number_of_reviews, review_scores_rating, 
                calculated_host_listings_count, license, longitude, latitude, NAMEUNIT)
  

municipios <- municipios %>% dplyr::select(NAMEUNIT)


pisos$price <- gsub("[\\$, ]", "", pisos$price) %>% as.numeric()  # Quitar el símbolo $


#Filtramos por un precio adecuado para evitar valores atípicos

pisos = pisos %>% dplyr::filter(price<5000, !is.na(NAMEUNIT), room_type %in% c("Entire home/apt", "Private room")) 

n_filas = 1
n_columnas = 1

matriz_AIC = matrix(nrow = n_filas,ncol = n_columnas)

set.seed(0)
t <- proc.time() # Inicia el cronómetro

for(repeticion in 1:n_filas){
  
  prueba = sample_n(pisos,2000)
  a=fastDummies::dummy_cols(prueba$room_type)
  
  prueba$Entire=a[,2]
  
  n <- dim(prueba)[1]
  puntos=cbind(prueba$longitude,prueba$latitude)
  
  dis <- dist(puntos,upper=TRUE)
  minimo = Inf
  
  for(i in 1:n_columnas){
    
    k = i
    
    D=as.matrix(dis)
    D=ifelse(D<=0.0117,1,0)
    W <- 1 / D^2
    W[!is.finite(W)] <- NA
    W[is.na(W)] <- 0
    rtot <- rowSums(W, na.rm=TRUE)
    W <- W / rtot # Matriz estandarizada
  
    print(c(repeticion,k))
    
    rm(D)
    gc()
    Wdist.mat.tot=W
    Wdist.list.tot=mat2listw(W)
    
    SARAR_prueba = sacsarlm(log(price)~accommodates+minimum_nights+availability_365+
                 number_of_reviews+license+Entire, data=prueba,
                 listw = Wdist.list.tot,zero.policy = TRUE)
    
    matriz_AIC[repeticion,i] = AIC(SARAR_prueba)
    
  }
  
}
tiempo = proc.time()-t
tiempo
```

```
minimos_filas <- apply(matriz_AIC, 1, min)
print(minimos_filas)
print(min(minimos_filas))

#Matriz con 10 repeticiones, con muestras de 200 pisos
#write.csv(matriz_AIC, "matriz_AIC.csv", row.names = FALSE, col.names = FALSE)

#Matriz con 50 repeticiones, con muestras de 500 pisos
#write.csv(matriz_AIC, "matriz_AIC2.csv", row.names = FALSE, col.names = FALSE)
matriz_AIC2 = read_csv("matriz_AIC2.csv")

for(i in 1:50){
  plot(1:n_columnas/100, matriz_AIC2[i,],type = "o", col = "red", pch = 16, xlab = "X", ylab = "Y", main = "Gráfico con puntos y líneas")
}
```