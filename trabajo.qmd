---
title: "main"
format: html
editor: source
---

```{r, eval=FALSE, echo=FALSE}
library(tidyverse)
library(ggplot2)
library(sf)
library(readr)
library(ggspatial)
library(sphet)
library(spatialreg)
library(spdep)
```

## Cargamos datasets

```{r}
pisos = read_csv("datasets/listings.csv", show_col_types = FALSE)
municipios = read_sf("datasets/mapa_espana/recintos_municipales_inspire_peninbal_etrs89.shp")
```

## Juntamos datasets

```{r}
#Agrupamos por municipios

municipios <- municipios %>% filter(CODNUT3=="ES532")


pisos1 <- st_as_sf(pisos, coords = c("longitude","latitude"), crs = st_crs(municipios), agr = "constant")

pisos <- st_join(pisos1,municipios, join = st_within) %>% 
   left_join(pisos %>% dplyr::select(id, latitude, longitude), by="id")

rm(pisos1)
```

## Limpiamos dataset

```{r}
pisos <- pisos %>% 
  dplyr::select(id,, room_type, accommodates, price, minimum_nights, 
                availability_365, number_of_reviews, review_scores_rating, 
                calculated_host_listings_count, license, longitude, latitude, NAMEUNIT) %>% 
  dplyr::mutate(license = if_else(is.na(license), 0, 1))

municipios <- municipios %>% dplyr::select(NAMEUNIT)


pisos$price <- gsub("[\\$, ]", "", pisos$price) %>% as.numeric()  # Quitar el símbolo $


#Filtramos por un precio adecuado para evitar valores atípicos

pisos = pisos %>% dplyr::filter(price<5000 & !is.na(NAMEUNIT)) 
  # %>% dplyr::mutate(logprice = log(price), .after = price) 
```

```{r}
mediana_precios <- aggregate(price ~ NAMEUNIT, data = pisos, FUN = median)
municipios <- merge(municipios, mediana_precios, by.x = "NAMEUNIT", by.y = "NAMEUNIT", all.x = TRUE)

municipios <- municipios %>%  rename(mediana_precio = price)
rm(mediana_precios)
```

```{r}
ggplot(pisos, aes(x = log(price))) +
  geom_density(fill = "blue", alpha = 0.5) +
  labs(title = "Densidad del logaritmo del precio",
       x = "Logaritmo del precio",
       y = "Densidad") +
  theme_minimal()

```

```{r, eval = FALSE}
plot_mallorca <- ggplot()+
  geom_sf(data=municipios, colour = "gray58", aes(fill = log(mediana_precio)))+
  coord_sf(xlim = c(2.3,3.5), ylim = c(39.2,40)) +
  scale_fill_gradient(name="Precios alquiler", low="green", high="red") +
  xlab("Longitud")+
  ylab("Latitud")+
  ggspatial::annotation_scale(
    location = "tl",
    bar_cols = c("grey60", "white")
  ) +
  ggspatial::annotation_north_arrow(
    location = "bl", which_north = "true",
    pad_x = unit(0, "in"), pad_y = unit(0, "in"),
    style = ggspatial::north_arrow_nautical(
      fill = c("grey40", "white"),
      line_col = "grey20"
    )
  )

plot_mallorca 
```

```{r}
set.seed(777)
muestra = sample_n(pisos,500)
```




```{r}
a=fastDummies::dummy_cols(muestra$room_type)

muestra$Entire=a[,2]


OLS=lm(log(price)~minimum_nights+number_of_reviews+
         calculated_host_listings_count+license+availability_365+Entire,
       data=muestra)

n <- dim(muestra)[1]

puntos=cbind(muestra$longitude,muestra$latitude)

dis <- dist(puntos,upper=TRUE)
D=as.matrix(dis)

W <- 1 / D^2


W[!is.finite(W)] <- NA
W[is.na(W)] <- 0
rtot <- rowSums(W, na.rm=TRUE)
W <- W / rtot # Matriz estandarizada
Wdist.mat.tot=W
Wdist.list.tot=mat2listw(W)


rm(dis)
```


```{r}
SAR=lagsarlm(log(price)~minimum_nights+number_of_reviews+
               license+availability_365+Entire,
             data=muestra,listw = Wdist.list.tot,zero.policy = TRUE)

summary(SAR)
```

```{r}
SARAR <- spreg(log(price)~minimum_nights+number_of_reviews+
                 calculated_host_listings_count+license+availability_365+Entire,
               data=muestra,listw = Wdist.list.tot, model="sarar", het=TRUE)

summary(SARAR)
```


### Modelo SARAR

```{r}

DatosF <- Datos %>% dplyr::filter(!is.na(price)) %>% 
  dplyr::filter(price<5000, price>10, 
                room_type%in%c("Entire home/apt", "Private room") ) %>% 
  dplyr::select(price, latitude, longitude, room_type,
                minimum_nights, number_of_reviews, calculated_host_listings_count,
                license, availability_365) %>% 
  dplyr::mutate(license = ifelse(is.na(license),0,1),
                priceRank = cut(price, 
                                breaks = round(quantile(price, probs=c(0,0.2,0.4,0.6,0.8,1))),
                                include.lowest = TRUE) ) %>% 
  na.exclude() %>% 
  sample_n(1000)



table(DatosF$room_type)

a=fastDummies::dummy_cols(DatosF$room_type)

DatosF$Entire=a[,2]


OLS=lm(log(price)~minimum_nights+number_of_reviews+
         calculated_host_listings_count+license+availability_365+Entire,
       data=DatosF)

n <- dim(DatosF)[1]

puntos=cbind(DatosF$longitude,DatosF$latitude)

dis <- dist(puntos,upper=TRUE)
D=as.matrix(dis)

W <- 1 / D^2


W[!is.finite(W)] <- NA
W[is.na(W)] <- 0
rtot <- rowSums(W, na.rm=TRUE)
Wdist.mat.tot=W
Wdist.list.tot=mat2listw(W)

W <- W / rtot # Matriz estandarizada
rm(dis)
```

```{r}
SAR=lagsarlm(log(price)~minimum_nights+number_of_reviews+
               calculated_host_listings_count+license+availability_365+Entire,
             data=DatosF,listw = Wdist.list.tot,zero.policy = TRUE)

summary(SAR)


SARAR <- spreg(log(price)~minimum_nights+number_of_reviews+
                 calculated_host_listings_count+license+availability_365+Entire,
               data=DatosF,listw = Wdist.list.tot, model="sarar", het=TRUE)

summary(SARAR)

```
